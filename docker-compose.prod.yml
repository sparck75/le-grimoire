services:
  # MongoDB Database (Primary)
  mongodb:
    image: mongo:7.0
    container_name: le-grimoire-mongodb-prod
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_USER:-legrimoire}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGODB_DB_NAME:-legrimoire}
    volumes:
      - mongodb_data:/data/db
      - ./data/openfoodfacts:/data/openfoodfacts:ro
      - ./backend/scripts/mongodb:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD", "mongosh", "--quiet", "--eval", "db.adminCommand('ping').ok"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - grimoire-network

  # PostgreSQL Database (Legacy - Optional)
  db:
    image: postgres:15-alpine
    container_name: le-grimoire-db-prod
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: le_grimoire
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - grimoire-network

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: le-grimoire-backend-prod
    restart: always
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/le_grimoire
      MONGODB_URL: ${MONGODB_URL}
      MONGODB_DB_NAME: ${MONGODB_DB_NAME:-legrimoire}
      SECRET_KEY: ${SECRET_KEY}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      APPLE_CLIENT_ID: ${APPLE_CLIENT_ID}
      APPLE_CLIENT_SECRET: ${APPLE_CLIENT_SECRET}
      REDIS_URL: ${REDIS_URL:-redis://redis:6379}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    volumes:
      - uploaded_images:/app/uploads
      - ./data:/app/data
    depends_on:
      db:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - grimoire-network
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --workers ${UVICORN_WORKERS:-4}

  # Next.js Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
    container_name: le-grimoire-frontend-prod
    restart: always
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
      BACKEND_URL: ${BACKEND_URL:-http://backend:8000}
      NEXT_PUBLIC_GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      NEXT_PUBLIC_APPLE_CLIENT_ID: ${APPLE_CLIENT_ID}
    depends_on:
      - backend
    networks:
      - grimoire-network

  # Redis for caching and task queue
  redis:
    image: redis:7-alpine
    container_name: le-grimoire-redis-prod
    restart: always
    volumes:
      - redis_data:/data
    networks:
      - grimoire-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: le-grimoire-nginx-prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - certbot_www:/var/www/certbot:ro
    depends_on:
      - frontend
      - backend
    networks:
      - grimoire-network

volumes:
  postgres_data:
  mongodb_data:
  redis_data:
  uploaded_images:
  certbot_www:

networks:
  grimoire-network:
    driver: bridge
